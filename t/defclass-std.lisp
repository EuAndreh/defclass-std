(in-package cl-user)
(defpackage defclass-std-test
  (:use cl defclass-std prove))
(in-package defclass-std-test)

;; NOTE: To run this test file, execute `(asdf:test-system :defclass-std)' in your Lisp.

(plan 7)

(deftest class/std->defclass/std->defclass-expansion-test
  (is-expand (class/std stub slot1 slot2 slot3 slot4 slot5)
             (DEFCLASS/STD STUB ()
               ((SLOT SLOT SLOT SLOT SLOT)))
             "CLASS/STD expands correctly into DEFCLASS/STD.")
  (is-expand (DEFCLASS/STD STUB ()
               ((SLOT SLOT SLOT SLOT SLOT)))
             (DEFCLASS STUB ()
               ((SLOT :ACCESSOR SLOT :INITARG :SLOT :INITFORM NIL)
                (SLOT :ACCESSOR SLOT :INITARG :SLOT :INITFORM NIL)
                (SLOT :ACCESSOR SLOT :INITARG :SLOT :INITFORM NIL)
                (SLOT :ACCESSOR SLOT :INITARG :SLOT :INITFORM NIL)
                (SLOT :ACCESSOR SLOT :INITARG :SLOT :INITFORM NIL)))
             "DEFCLASS/STD generated by CLASS/STD expands as expected to DEFCLASS."))

(deftest class/std-with-args-expansion-test
  (is-expand (class/std new-stub var var var var :with :std :unbound)
             (DEFCLASS/STD NEW-STUB ()
               ((VAR VAR VAR VAR :WITH :STD :UNBOUND)))
             "CLASS/STD with :keyword options expand correctly into a DEFCLASS/STD form with the same :keyword options.")
  (is-expand (DEFCLASS/STD NEW-STUB ()
               ((VAR VAR VAR VAR :WITH :STD :UNBOUND)))
             (DEFCLASS NEW-STUB ()
               ((VAR :ACCESSOR NEW-STUB-VAR :INITARG :VAR)
                (VAR :ACCESSOR NEW-STUB-VAR :INITARG :VAR)
                (VAR :ACCESSOR NEW-STUB-VAR :INITARG :VAR)
                (VAR :ACCESSOR NEW-STUB-VAR :INITARG :VAR)))
             "DEFCLASS/STD with keyword options generated by CLASS/STD with :keyowrd options expands as expected to DEFCLASS."))

(deftest default-accessor-initarg
  (is-expand (DEFCLASS/STD STUB ()
               ((SLOT SLOT SLOT SLOT SLOT)))
             (DEFCLASS STUB ()
               ((SLOT :ACCESSOR SLOT :INITARG :SLOT :INITFORM NIL)
                (SLOT :ACCESSOR SLOT :INITARG :SLOT :INITFORM NIL)
                (SLOT :ACCESSOR SLOT :INITARG :SLOT :INITFORM NIL)
                (SLOT :ACCESSOR SLOT :INITARG :SLOT :INITFORM NIL)
                (SLOT :ACCESSOR SLOT :INITARG :SLOT :INITFORM NIL)))
             "Defaults omitted args (:ai) works correctly."))

(deftest test-all-keyword-option
  (is-expand (defclass/std computer (gadget)
               ((screen mouse keyboard :a :type string :with)
                (bluetooth touchpad :wi :std :unbound)
                (speaker microphone :r)
                (place :@@ :with-prefix :doc "Where it is" :r)
                (owner :static :std "Me" :w)))
             (DEFCLASS COMPUTER (GADGET)
               ((SCREEN :ACCESSOR COMPUTER-SCREEN :INITFORM NIL :TYPE STRING)
                (MOUSE :ACCESSOR COMPUTER-MOUSE :INITFORM NIL :TYPE STRING)
                (KEYBOARD :ACCESSOR COMPUTER-KEYBOARD :INITFORM NIL :TYPE STRING)
                (BLUETOOTH :WRITER BLUETOOTH :INITARG :BLUETOOTH)
                (TOUCHPAD :WRITER TOUCHPAD :INITARG :TOUCHPAD)
                (SPEAKER :READER SPEAKER :INITFORM NIL)
                (MICROPHONE :READER MICROPHONE :INITFORM NIL)
                (PLACE :READER COMPUTER-PLACE :INITFORM NIL :ALLOCATION :CLASS
                       :DOCUMENTATION "Where it is")
                (OWNER :WRITER OWNER :INITFORM "Me" :ALLOCATION :CLASS)))))

(deftest test-*default-std*-binding
  (is-expand (defclass/std default ()
               ((with-std)))
             (DEFCLASS DEFAULT ()
               ((WITH-STD :ACCESSOR WITH-STD :INITARG :WITH-STD :INITFORM NIL)))
             "*DEFAULT-STD* defaults to T, adding :INITFORM NIL")
  (let (*default-std*)
    (is-expand (defclass/std default ()
               ((with-std)))
             (DEFCLASS DEFAULT ()
               ((WITH-STD :ACCESSOR WITH-STD :INITARG :WITH-STD)))
             "When bound to NIL, *DEFAULT-STD* changes the behaviour of DEFCLASS/STD correctly, avoidind the addition of :INITFORM NIL.")))

(deftest test-*with-prefix*-binding
  (is-expand (defclass/std prefix ()
               ((without-prefix)))
             (DEFCLASS PREFIX ()
               ((WITHOUT-PREFIX :ACCESSOR WITHOUT-PREFIX
                                :INITARG :WITHOUT-PREFIX
                                :INITFORM NIL)))
             "*WITH-PREFIX* defaults to NIL, avoiding the addition of the class name as a prefix to the accessor.")
  (let ((*with-prefix* t))
    (is-expand (defclass/std prefix ()
                 ((without-prefix :with)))
               (DEFCLASS PREFIX ()
                 ((WITHOUT-PREFIX :ACCESSOR PREFIX-WITHOUT-PREFIX
                                  :INITARG :WITHOUT-PREFIX
                                  :INITFORM NIL)))
               "When bound to T, *WITH-PREFIX* changes the behaviour of DEFCLASS/STD, add the class name as a prefix to the accessor.")))

(deftest test-ignore-unknown-keywords
  (is-expand (defclass/std unknown ()
               ((slot :unknown :keywords)))
             (DEFCLASS UNKNOWN ()
               ((SLOT :ACCESSOR SLOT
                      :INITARG :SLOT
                      :INITFORM NIL
                      :KEYWORDS :UNKNOWN)))
             "DEFCLASS/STD with unknown keywords works as expected, keeping them as they are."))

(run-test-all)
